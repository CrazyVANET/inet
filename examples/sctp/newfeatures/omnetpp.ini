# * --------------------------------------------------------------------------
# *
# *     //====//  //===== <===//===>  //====//
# *    //        //          //      //    //    SCTP Optimization Project
# *   //=====   //          //      //====//   ==============================
# *        //  //          //      //           University of Duisburg-Essen
# *  =====//  //=====     //      //
# *
# * --------------------------------------------------------------------------
# *
# *   Copyright (C) 2009-2012 by Thomas Dreibholz
# *
# *   This program is free software: you can redistribute it and/or modify
# *   it under the terms of the GNU General Public License as published by
# *   the Free Software Foundation, either version 3 of the License, or
# *   (at your option) any later version.
# *
# *   This program is distributed in the hope that it will be useful,
# *   but WITHOUT ANY WARRANTY; without even the implied warranty of
# *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# *   GNU General Public License for more details.
# *
# *   You should have received a copy of the GNU General Public License
# *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
# *
# *   Contact: dreibh@iem.uni-due.de

[General]
network             = newFeaturesTest
rng-class           = cMersenneTwister
seed-0-mt           = 1
output-scalar-file  = scalars.sca
output-vector-file  = vectors.vec
sim-time-limit      = 0s 3600s 1ms
simtime-scale       = -8   # 10ns time scale

cmdenv-express-mode = yes     # *** Enable debugging messages here! ***
**.testing          = false   # *** Enable debugging messages here! ***
**.checkQueues      = false   # *** Enable checkOutstandingBytes() calls here! ***

newFeaturesTest.**.vector-recording           = no
newFeaturesTest.**.vector-recording-intervals = 0s..0s 3600s


# ===== General Scenario Settings ======================
newFeaturesTest.systems  = 5
newFeaturesTest.networks = 2

# ===== Network QoS Settings ===========================
newFeaturesTest.westernCoreRouter[*].ppp[0].ppp.mtu             = 1500
newFeaturesTest.westernCoreRouter[*].ppp[0].queueType           = "REDQueue"
newFeaturesTest.westernCoreRouter[*].ppp[0].queue.wq            = 0.002
newFeaturesTest.westernCoreRouter[*].ppp[0].queue.minth         = 30
newFeaturesTest.westernCoreRouter[*].ppp[0].queue.maxth         = 90
newFeaturesTest.westernCoreRouter[*].ppp[0].queue.maxp          = 0.1
newFeaturesTest.westernCoreRouter[*].ppp[0].queue.frameCapacity = 100
newFeaturesTest.westernCoreRouter[*].ppp[0].queue.pkrate        = 8333.333
newFeaturesTest.westernCoreRouter[*].pppg$o[0].channel.datarate = 1e+07 bps
newFeaturesTest.westernCoreRouter[*].pppg$o[0].channel.delay    = 10 ms
newFeaturesTest.westernCoreRouter[*].pppg$o[0].channel.per      = 0
newFeaturesTest.westernCoreRouter[*].pppg$o[0].channel.ber      = 1e-7   ## !!!
newFeaturesTest.easternCoreRouter[*].ppp[0].ppp.mtu             = 1500
newFeaturesTest.easternCoreRouter[*].ppp[0].queueType           = "REDQueue"
newFeaturesTest.easternCoreRouter[*].ppp[0].queue.wq            = 0.002
newFeaturesTest.easternCoreRouter[*].ppp[0].queue.minth         = 30
newFeaturesTest.easternCoreRouter[*].ppp[0].queue.maxth         = 90
newFeaturesTest.easternCoreRouter[*].ppp[0].queue.maxp          = 0.1
newFeaturesTest.easternCoreRouter[*].ppp[0].queue.frameCapacity = 100
newFeaturesTest.easternCoreRouter[*].ppp[0].queue.pkrate        = 8333.333
newFeaturesTest.easternCoreRouter[*].pppg$o[0].channel.datarate = 1e+07 bps
newFeaturesTest.easternCoreRouter[*].pppg$o[0].channel.delay    = 10 ms
newFeaturesTest.easternCoreRouter[*].pppg$o[0].channel.per      = 0
newFeaturesTest.easternCoreRouter[*].pppg$o[0].channel.ber      = 1e-7   ## !!!

# ----- Common Settings ----------------------------------
newFeaturesTest.*.ppp[*].ppp.mtu = 1500

# ===== Application Parameters ===========================
# ----- SCTP Clients -------------------------------------
newFeaturesTest.clientMain[*].numSctpApps                      = 1
newFeaturesTest.clientMain[*].sctpAppType                      = "SCTPClient"
newFeaturesTest.clientMain[*].sctpApp[*].startTime             = 1s
newFeaturesTest.clientMain[*].sctpApp[*].numRequestsPerSession = 10000
newFeaturesTest.clientMain[*].sctpApp[*].requestLength         = 1000

newFeaturesTest.clientMain[*].sctpApp[*].address               = ""
newFeaturesTest.clientMain[*].sctpApp[*].port                  = 20000+${mainClientAppID=ancestorIndex(0)}
newFeaturesTest.clientMain[*].sctpApp[*].connectAddress        = "newFeaturesTest.serverMain[" + string(${mainClientID=ancestorIndex(1)}) + "]/ppp0"
newFeaturesTest.clientMain[*].sctpApp[*].connectPort           = 8000+${mainClientAppID}
newFeaturesTest.clientMain[*].sctpApp[*].primaryPath           = "newFeaturesTest.serverMain[" + string(${mainClientID}) + "]/ppp0"


# ----- SCTP Servers--------------------------------------
newFeaturesTest.serverMain[*].numSctpApps                             = 1
newFeaturesTest.serverMain[*].sctpAppType                             = "SCTPServer"
newFeaturesTest.serverMain[*].sctpApp[*].numPacketsToReceivePerClient = 10000

newFeaturesTest.serverMain[*].sctpApp[*].address                      = ""
newFeaturesTest.serverMain[*].sctpApp[*].port                         = 8000+${mainServerAppID=ancestorIndex(0)}

# ===== TCPDump ==========================================
newFeaturesTest.client*[*].tcpdump.dumpFile           = ${N1=fullPath()}+".pcap"
newFeaturesTest.server*[*].tcpdump.dumpFile           = ${N2=fullPath()}+".pcap"
newFeaturesTest.westernCoreRouter[*].tcpdump.dumpFile = ${N3=fullPath()}+".pcap"
newFeaturesTest.easternCoreRouter[*].tcpdump.dumpFile = ${N4=fullPath()}+".pcap"

# ===== SCTP Parameters ==================================
newFeaturesTest.*.sctp.arwnd            = 5e+06
newFeaturesTest.*.sctp.hbInterval       = 30 s
newFeaturesTest.*.sctp.enableHeartbeats = true

# ===== SCTP Extensions ==================================

# ------ SACK Immediately --------------------------------
newFeaturesTest.*.sctp.sackNow = true

# ------ Non-Renegable SACK (NR-SACK) --------------------
newFeaturesTest.*.sctp.nrSack = true

# ------ Packet Drop Reporting (PKTDROP) -----------------
newFeaturesTest.*.sctp.packetDrop = true

# ------ Chunk Authentication (AUTH)----------------------
newFeaturesTest.*.sctp.auth = true
# Which chunks should be authenticated?
newFeaturesTest.*.sctp.chunks = "ASCONF,ASCONF_ACK"

# ------ Dynamic Address Reconfiguration ("Add-IP")-------
newFeaturesTest.*.sctp.addIP = true

newFeaturesTest.clientMain[0].sctp.addTime    = 10s
newFeaturesTest.clientMain[0].sctp.addAddress = "newFeaturesTest.clientMain[" + string(${mainClientID}) + "]/ppp1"
newFeaturesTest.clientMain[0].sctp.addIpType  = "49156"   # SET_PRIMARY_ADDRESS
# ++++++ Add-IP example is for Client #0 only! ++++++

# ------ Partial Reliability (PR-SCTP) -------------------
# prMethod condigures the PR-SCTP method:
#   0=NONE, 1=PR_TTL, 2=PR_RTX, 3=PR_PRIO, 4=PR_STRRST
# prValue configures the corresponding parameter
# (e.g. maximum number of retransmission for PR_RTX)
newFeaturesTest.clientMain[1].sctpApp[*].prMethod = 2   # PR_RTX
newFeaturesTest.clientMain[1].sctpApp[*].prValue  = 0   # 0 retransmissions
# ++++++ PR-SCTP example is for Client #1 only! ++++++
